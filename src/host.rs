use axum::{extract::State, http::StatusCode, Json};
use serde::{Deserialize, Serialize};
use sqlx::{pool::PoolConnection, query, sqlite::SqliteQueryResult, Row, Sqlite, SqlitePool};
use tracing::{debug, error};
use uuid::Uuid;

#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, Default)]
pub struct Host {
    pub id: Uuid,
    pub alias: String,
    pub attributes: Vec<String>,
    pub ip: String,
    pub last_pong: String,
}

impl Host {
    /// Insert Host into hosts table in SQLite database
    ///
    /// | Name | Type | Comment
    /// :--- | :--- | :---
    /// | id | TEXT | uuid
    /// | alias | TEXT | host alias (name)
    /// | attributes | TEXT | host labels
    /// | ip | TEXT | host ip:port
    /// | last_pong | TEXT | last checkin from agent
    pub async fn insert_into_db(self, mut connection: PoolConnection<Sqlite>) -> SqliteQueryResult {
        let q = r#"INSERT INTO hosts(alias, attributes, ip, last_pong, id)
        VALUES(?, ?, ?, datetime(), ?)
        ON CONFLICT(id) DO UPDATE SET
        alias = ?, attributes = ?, ip = ?, last_pong = datetime() 
        WHERE id = ?"#;
        match query(q)
            .bind(self.alias)
            .bind(serde_json::to_string(&self.attributes).unwrap())
            .bind(self.ip)
            .bind(serde_json::to_string(&self.id).unwrap())
            // .bind(self.last_pong) <- generated by insert
            .execute(&mut *connection)
            .await
        {
            Ok(r) => r,
            Err(e) => {
                if let Some(er) = e.as_database_error() {
                    if er.is_unique_violation() {
                        debug!("Host already known");
                    } else {
                        error!(
                            "Inserting new host into host table failed. Reason: \n{}",
                            er.message()
                        );
                    };
                }
                SqliteQueryResult::default()
            }
        }
    }
}

/// API to get all hosts
pub async fn get_hosts_api(State(pool): State<SqlitePool>) -> (StatusCode, Json<Vec<Host>>) {
    let mut conn = pool.acquire().await.unwrap();
    let hosts = match query("SELECT * FROM hosts").fetch_all(&mut *conn).await {
        Ok(d) => d,
        Err(_) => return (StatusCode::NOT_FOUND, Json(Vec::new())),
    };

    let mut host_vec: Vec<Host> = Vec::new();

    for s in hosts {
        let host = Host {
            id: serde_json::from_str(&s.get::<String, _>("id")).unwrap(),
            alias: s.get::<String, _>("alias"),
            attributes: serde_json::from_str(&s.get::<String, _>("attributes")).unwrap(),
            ip: s.get::<String, _>("ip"),
            last_pong: s.get::<String, _>("last_pong"),
        };
        host_vec.push(host);
    }

    (StatusCode::OK, Json(host_vec))
}

// pub async fn update_text_field(
//     id: String,
//     column: &str,
//     data: String,
//     connection: PoolConnection<Sqlite>,
// ) -> SqliteQueryResult {
//     crate::db::update_text_field(id, column, data, "hosts", connection).await
// }

pub async fn update_timestamp(
    id: Uuid,
    column: &str,
    connection: PoolConnection<Sqlite>,
) -> SqliteQueryResult {
    crate::db::update_timestamp(id, column, "hosts", connection).await
}
// async fn single_agent_api(
//     Path(id): Path<Uuid>,
//     State(pool): State<SqlitePool>,
// ) -> (StatusCode, Json<AgentData>) {
//     let mut conn = pool.acquire().await.unwrap();
//     let show_data = match query("SELECT * FROM data WHERE id = ?")
//         .bind(id.to_string())
//         .fetch_one(&mut *conn)
//         .await
//     {
//         Ok(d) => d,
//         Err(_) => return (StatusCode::NOT_FOUND, Json(AgentData::default())),
//     };
//     let single_agent = AgentData {
//         id: show_data.get::<String, _>("id"),
//         alias: show_data.get::<String, _>("name"),
//         uptime: show_data.get::<i64, _>("uptime"),
//         os_release: show_data.get::<String, _>("os_release"),
//         memory: serde_json::from_str(show_data.get::<String, _>("memory").as_str()).unwrap(),
//         units: serde_json::from_str(show_data.get::<String, _>("units").as_str()).unwrap(),
//     };
//     (StatusCode::OK, Json(single_agent))
// }
