use axum::{
    extract::{Path, State},
    http::StatusCode,
    response::IntoResponse,
    Json,
};
use serde::{Deserialize, Serialize};
use sqlx::{
    pool::PoolConnection,
    query,
    sqlite::{SqliteQueryResult, SqliteRow},
    Row, Sqlite, SqlitePool,
};
use tracing::{debug, error};
use uuid::Uuid;

#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, Default)]
pub struct Host {
    pub id: Uuid,
    pub alias: String,
    pub attributes: Vec<String>,
    pub ip: String,
    pub last_pong: String,
}

impl Host {
    /// Insert Host into hosts table in SQLite database
    ///
    /// | Name | Type | Comment
    /// :--- | :--- | :---
    /// | id | TEXT | uuid
    /// | alias | TEXT | host alias (name)
    /// | attributes | TEXT | host labels
    /// | ip | TEXT | host ip:port
    /// | last_pong | TEXT | last checkin from agent
    pub async fn insert_into_db(self, mut connection: PoolConnection<Sqlite>) -> SqliteQueryResult {
        let q = r#"INSERT INTO hosts(alias, attributes, ip, last_pong, id)
        VALUES(?, ?, ?, datetime(), ?)
        ON CONFLICT(id) DO UPDATE SET
        alias = ?, attributes = ?, ip = ?, last_pong = datetime()
        WHERE id = ?"#;
        match query(q)
            .bind(self.alias)
            .bind(serde_json::to_string(&self.attributes).unwrap())
            .bind(self.ip)
            .bind(&self.id.to_string())
            // .bind(self.last_pong) <- generated by insert
            .execute(&mut *connection)
            .await
        {
            Ok(r) => r,
            Err(e) => {
                if let Some(er) = e.as_database_error() {
                    if er.is_unique_violation() {
                        debug!("Host already known");
                    } else {
                        error!(
                            "Inserting new host into host table failed. Reason: \n{}",
                            er.message()
                        );
                    };
                }
                SqliteQueryResult::default()
            }
        }
    }
}

impl From<SqliteRow> for Host {
    fn from(s: SqliteRow) -> Self {
        Host {
            id: s.get::<String, _>("id").parse().unwrap(),
            alias: s.get::<String, _>("alias"),
            attributes: serde_json::from_str(&s.get::<String, _>("attributes")).unwrap(),
            ip: s.get::<String, _>("ip"),
            last_pong: s.get::<String, _>("last_pong"),
        }
    }
}

/// API to get all hosts
pub async fn get_hosts_api(State(pool): State<SqlitePool>) -> impl IntoResponse {
    let host_vec = get_hosts_from_db(None, pool.acquire().await.unwrap()).await;
    Json(host_vec)
}

/// API to get one host
pub async fn get_one_host_api(
    Path(id): Path<Uuid>,
    State(pool): State<SqlitePool>,
) -> impl IntoResponse {
    let filter = format!("id='{id}'",);
    let host_vec = get_hosts_from_db(Some(&filter), pool.acquire().await.unwrap()).await;
    Json(host_vec)
}

/// API to delete all hosts
pub async fn delete_hosts_api(State(pool): State<SqlitePool>) -> impl IntoResponse {
    delete_hosts_from_db(None, pool.acquire().await.unwrap()).await
}

/// API to delete one host
pub async fn delete_one_host_api(
    Path(id): Path<Uuid>,
    State(pool): State<SqlitePool>,
) -> impl IntoResponse {
    let filter = format!("id='{id}'",);
    delete_hosts_from_db(Some(&filter), pool.acquire().await.unwrap()).await
}

/// API to create a new host
pub async fn post_hosts_api(
    State(pool): State<SqlitePool>,
    Json(payload): Json<Host>,
) -> impl IntoResponse {
    debug!("{:?}", payload);
    let id = payload.id.to_string();
    let res = payload.insert_into_db(pool.acquire().await.unwrap()).await;
    if res.rows_affected() == 1 {
        (StatusCode::CREATED, Json(id))
    } else {
        (StatusCode::BAD_REQUEST, Json("".into()))
    }
}

pub async fn get_hosts_from_db(
    filter: Option<&str>,
    mut connection: PoolConnection<Sqlite>,
) -> Vec<Host> {
    let stmt = if let Some(f) = filter {
        format!("SELECT * FROM hosts WHERE {f}")
    } else {
        "SELECT * FROM hosts".into()
    };
    let hosts = match query(&stmt).fetch_all(&mut *connection).await {
        Ok(d) => d,
        Err(_) => return Vec::new(),
    };

    hosts.into_iter().map(|s| s.into()).collect()
}

pub async fn delete_hosts_from_db(
    filter: Option<&str>,
    mut connection: PoolConnection<Sqlite>,
) -> StatusCode {
    let stmt = if let Some(f) = filter {
        format!("DELETE FROM hosts WHERE {f}")
    } else {
        "DELETE FROM hosts".into()
    };
    let res = query(&stmt).execute(&mut *connection).await;
    if res.is_err() {
        StatusCode::FORBIDDEN
    } else {
        StatusCode::OK
    }
}

pub async fn update_timestamp(
    id: Uuid,
    column: &str,
    connection: PoolConnection<Sqlite>,
) -> SqliteQueryResult {
    crate::db::update_timestamp(id, column, "hosts", connection).await
}
